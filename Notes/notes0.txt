>>>I use the bash interface bcz this is linux friendly and mostly faster than cmd

>>mostly v r using git vcs in team projects

>>first v create a folder ,wr v have got a stuff..

>>right click on that folder and we choose the option "git bash here"

>>then we switch with cd to our folder


>>type git init to get a empty git repository

>>now add a file
>> i write a small java program
>> now we have to say git,it should watch Test.java
>>   git add Test.java
>> now,we have to commit ..
    commiting is a kind of creating a snapshot of all files..
   later v can comapare different snapshots

>>to commit,type git commit -am "log message"

  the  -a switch means that git should commit all new or changed files. 
  -m is for the message
>>the log message should be between " "

>> to view all available snapshots ,type 'git log'
you can see who committed,and wt he wrotes as the commit msg.
Each commit has an identifier
(SHA1 hash)
>> if we changed something in our file....we can see with the use of 
   'git diff' command
to get all the differences since the last commit

>line starting with a minus means that those lines are deleted, or changed

>line starting with a plus means that those lines are added,or changed

>>we commit our changes
as we can see ,v ve got 3  commits

>>now we can view the difference b/w the commits
   c9668df6 and 78541dd01
note:
v dont need to type the whole SHA1 hash  
usually the first 7 letters are enough
 syntax of git diff:
git diff $ID1 $ID2(opt.$FILES)

>>now we can see our added changes.
Note:
>>the latest revision (id)is always HEAD
The latest-1 revision is always HEAD~

so we can show the diff b/w the last and the 2nd last 
commit using git diff HEAD~ HEAD







